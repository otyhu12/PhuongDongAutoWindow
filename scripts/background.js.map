{ "version": 3, "sources": ["scripts/background.js"], "names": ["showOptionsPage", "chrome", "runtime", "openOptionsPage", "err", "console", "error", "log", "call", "stack", "loadDisplayInfos", "system", "display", "getInfo", "displayInfosResult", "displayInfos", "findCachedWindow", "windowId", "found", "idx", "windowCache", "length", "id", "storeWindowIntoCache", "window", "splice", "WINDOW_CACHE_SIZE", "shift", "push", "onFocusChangeListener", "startUpdateTabRules", "targetWindowId", "setTimeout", "updateTabRules", "WINDOW_CHANGE_DETECTION_INTERVAL", "allIdentifiersMap", "states", "lastWindowInFocus", "currentWindowInFocus", "key", "hasOwnProperty", "_windowId", "WINDOW_ID_NONE", "cachedWindow", "doUpdateTabRules", "tabs", "tabRuleOptions", "loadOptions", "tab", "tabRule", "findTabRuleMatch", "remember", "validateTabLocation", "monitor", "findMonitorByWindow", "position", "determinePositionByCurrentLocation", "changed", "updateTabRuleByLocation", "saveOptions", "windows", "get", "populate", "e", "toString", "indexOf", "POSITIONS", "CENTER", "state", "WINDOW_STATES", "MAXIMIZED", "workArea", "calculateWorkAreaByPosition", "matchesWorkArea", "PIXEL_MONITOR_DETECTION_DELTA", "pixelErrorMargin", "matches", "delta", "top", "height", "left", "width", "highestIdx", "highestArea", "displayWorkArea", "rightMostLeft", "leftMostRight", "bottomMostTop", "topMostBottom", "area", "valid", "match", "active", "url", "findCustomPositionMatch", "custom", "positions", "customPosition", "name", "monitorWorkArea", "workarea", "LEFT_HALF", "Math", "floor", "RIGHT_HALF", "halfWidth", "TOP_HALF", "BOTTOM_HALF", "halfHeight", "localStorage", "OPTIONS_KEY", "JSON", "parse", "options", "stringify", "getInt", "value", "intValue", "parseInt", "onTabCreated", "disableCreationMessage", "moveTabIntoPositionedWindow", "count", "MAX_MOVE_TRIES", "isCustomPosition", "createData", "x", "y", "tabId", "popup", "type", "getAll", "i", "remove", "create", "update", "FULLSIZE", "onInstalled", "addListener", "details", "previousVersion", "NORMAL", "MINIMIZED", "FULLSCREEN", "DOCKED", "currentWindowLocationHandler", "onFocusChanged", "onCreated"], "mappings": "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", "file": "background.js", "sourcesContent": ["'use strict';\n\ntry {\n  chrome.runtime.onInstalled.addListener(function (details) {\n    console.log('previousVersion', details.previousVersion);\n  });\n} catch (err) {\n  (console.error || console.log).call(console, err.stack || err);\n}\n\nfunction showOptionsPage() {\n  try {\n    chrome.runtime.openOptionsPage();\n  } catch (err) {\n    (console.error || console.log).call(console, err.stack || err);\n  }\n}\n\n//chrome.browserAction.setBadgeText({text: '\\'Allo'});\n//chrome.browserAction.onClicked.addListener(showOptionsPage);\n\n//console.log('\\'Allo \\'Allo! Event Page for Browser Action');\n\nvar OPTIONS_KEY = 'TAB_HELPER_OPTIONS';\n\nvar POSITIONS = {\n  FULLSIZE: { id: 'fullsize', name: 'fullsize' },\n  CENTER: { id: 'center', name: 'center' },\n  LEFT_HALF: { id: 'left-half', name: 'left-half' },\n  RIGHT_HALF: { id: 'right-half', name: 'right-half' },\n  TOP_HALF: { id: 'top-half', name: 'top-half' },\n  BOTTOM_HALF: { id: 'bottom-half', name: 'bottom-half' }\n};\n\nvar WINDOW_ID_NONE = -1;\nvar PIXEL_MONITOR_DETECTION_DELTA = 100;\nvar WINDOW_CHANGE_DETECTION_INTERVAL = 1000;\nvar MAX_MOVE_TRIES = 10;\n\nvar WINDOW_CACHE_SIZE = 20;\nvar windowCache = [];\n\nvar WINDOW_STATES = {\n  NORMAL: 'normal',\n  MINIMIZED: 'minimized',\n  MAXIMIZED: 'maximized',\n  FULLSCREEN: 'fullscreen',\n  DOCKED: 'docked'\n};\n\nvar states = {\n  lastWindowInFocus: WINDOW_ID_NONE,\n  currentWindowInFocus: WINDOW_ID_NONE,\n  currentWindowLocationHandler: null\n};\n\nvar displayInfos = [];\n\nloadDisplayInfos();\n\nfunction loadDisplayInfos() {\n  try {\n    chrome.system.display.getInfo(function (displayInfosResult) {\n      displayInfos = displayInfosResult;\n    });\n  } catch (err) {\n    (console.error || console.log).call(console, err.stack || err);\n  }\n}\n\n// chrome.windows.onRemoved.addListener(function callback(windowId) {\n//   console.log('Window removed ' + windowId);\n//   const indexToRemove = findCachedWindow(windowId);\n//   if (indexToRemove !== -1) {\n//     const window = windowCache[indexToRemove];\n//     windowCache.splice(indexToRemove, 1);\n//     updateTabRules(windowId, window);\n//   }\n// });\n\nfunction findCachedWindow(windowId) {\n  var found = -1;\n  try {\n    for (var idx = 0; idx < windowCache.length; idx++) {\n      if (windowCache[idx].id === windowId) {\n        found = idx;\n      }\n    }\n  } catch (err) {\n    (console.error || console.log).call(console, err.stack || err);\n  }\n  return found;\n}\n\nfunction storeWindowIntoCache(window) {\n  try {\n    var idx = findCachedWindow(window.id);\n    if (idx >= 0) {\n      windowCache.splice(idx, 1);\n    }\n    if (windowCache.length >= WINDOW_CACHE_SIZE) {\n      windowCache.shift();\n    }\n    console.log('Window cached ' + window.id);\n    windowCache.push(window);\n  } catch (err) {\n    (console.error || console.log).call(console, err.stack || err);\n  }\n}\n\ntry {\n  chrome.windows.onFocusChanged.addListener(onFocusChangeListener);\n} catch (err) {\n  (console.error || console.log).call(console, err.stack || err);\n}\n\nfunction onFocusChangeListener(windowId) {\n  try {\n    console.log('Window Focused ' + windowId);\n    var allIdentifiersMap = {};\n    allIdentifiersMap['i' + states.lastWindowInFocus] = states.lastWindowInFocus;\n    allIdentifiersMap['i' + states.currentWindowInFocus] = states.currentWindowInFocus;\n    allIdentifiersMap['i' + windowId] = windowId;\n\n    states.lastWindowInFocus = states.currentWindowInFocus;\n    states.currentWindowInFocus = windowId;\n    console.log('Window transition ' + states.lastWindowInFocus + ' to ' + states.currentWindowInFocus);\n\n    for (var key in allIdentifiersMap) {\n      if (allIdentifiersMap.hasOwnProperty(key)) {\n        var _windowId = allIdentifiersMap[key];\n        if (_windowId !== WINDOW_ID_NONE) {\n          startUpdateTabRules(_windowId);\n        }\n      }\n    }\n  } catch (err) {\n    (console.error || console.log).call(console, err.stack || err);\n  }\n\n  function startUpdateTabRules(targetWindowId) {\n    setTimeout(function () {\n      updateTabRules(targetWindowId);\n      setTimeout(function () {\n        updateTabRules(targetWindowId);\n      }, WINDOW_CHANGE_DETECTION_INTERVAL * 5);\n    }, WINDOW_CHANGE_DETECTION_INTERVAL);\n  }\n}\n\nfunction updateTabRules(windowId, cachedWindow) {\n  try {\n    if (cachedWindow) {\n      doUpdateTabRules(cachedWindow);\n    } else {\n      chrome.windows.get(windowId, {\n        populate: true\n      }, function (window) {\n        try {\n          if (window) {\n            storeWindowIntoCache(window);\n            doUpdateTabRules(window);\n          }\n        } catch (e) {\n          if (e.toString().indexOf('No window with id') >= 0) {}\n        }\n      });\n    }\n  } catch (err) {\n    (console.error || console.log).call(console, err.stack || err);\n  }\n\n  function doUpdateTabRules(window) {\n    if (window && window.tabs) {\n      var tabRuleOptions = loadOptions();\n      for (var idx = 0; idx < window.tabs.length; idx++) {\n        var tab = window.tabs[idx];\n        var tabRule = findTabRuleMatch(tabRuleOptions, tab);\n        if (tabRule && tabRule.remember && !validateTabLocation(window, tab, tabRule)) {\n          var monitor = findMonitorByWindow(window);\n          if (monitor) {\n            var position = determinePositionByCurrentLocation(monitor, window);\n            if (position) {\n              var changed = updateTabRuleByLocation(tabRule, monitor, position, windowId);\n              if (changed) {\n                saveOptions(tabRuleOptions);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction determinePositionByCurrentLocation(monitor, window) {\n  var position = POSITIONS.CENTER.id;\n  try {\n    if (window.state === WINDOW_STATES.MAXIMIZED) {\n      position = POSITIONS.CENTER.id;\n    } else {\n      for (var key in POSITIONS) {\n        if (POSITIONS.hasOwnProperty(key)) {\n          var workArea = calculateWorkAreaByPosition(monitor.workArea, POSITIONS[key].id);\n          if (matchesWorkArea(window, workArea, PIXEL_MONITOR_DETECTION_DELTA)) {\n            position = POSITIONS[key].id;\n            break;\n          }\n        }\n      }\n    }\n  } catch (err) {\n    (console.error || console.log).call(console, err.stack || err);\n  }\n  return position;\n}\n\nfunction matchesWorkArea(window, workArea, pixelErrorMargin) {\n  var matches = false;\n  try {\n    var delta = pixelErrorMargin ? pixelErrorMargin : 0;\n    matches = window.top >= workArea.top - delta && window.top <= workArea.top + delta && window.top + window.height >= workArea.top - delta + workArea.height && window.top + window.height <= workArea.top + delta + workArea.height && window.left >= workArea.left - delta && window.left <= workArea.left + delta && window.left + window.width >= workArea.left - delta + workArea.width && window.left + window.width <= workArea.left + delta + workArea.width;\n  } catch (err) {\n    (console.error || console.log).call(console, err.stack || err);\n  }\n  return matches;\n}\n\nfunction findMonitorByWindow(window) {\n  var monitor = null;\n  try {\n    var highestIdx = -1;\n    var highestArea = -1;\n    for (var idx = 0; idx < displayInfos.length; idx++) {\n      var display = displayInfos[idx];\n      var displayWorkArea = display.workArea;\n      var rightMostLeft = window.left > displayWorkArea.left ? window.left : displayWorkArea.left;\n      var leftMostRight = window.left + window.width < displayWorkArea.left + displayWorkArea.width ? window.left + window.width : displayWorkArea.left + displayWorkArea.width;\n      var bottomMostTop = window.top > displayWorkArea.top ? window.top : displayWorkArea.top;\n      var topMostBottom = window.top + window.height < displayWorkArea.top + displayWorkArea.height ? window.top + window.height : displayWorkArea.top + displayWorkArea.height;\n\n      var area = (leftMostRight - rightMostLeft) * (topMostBottom - bottomMostTop);\n      if (area > highestArea) {\n        highestArea = area;\n        highestIdx = idx;\n      }\n      /*if (window.top >= displayWorkArea.top &&\n       window.top <= displayWorkArea.top + displayWorkArea.height &&\n       window.left >= displayWorkArea.left &&\n       window.left <= displayWorkArea.left + displayWorkArea.width) {\n       monitor = display;\n       break;\n       }*/\n    }\n    if (highestIdx !== -1) {\n      monitor = displayInfos[highestIdx];\n    }\n  } catch (err) {\n    (console.error || console.log).call(console, err.stack || err);\n  }\n  return monitor;\n}\n\nfunction updateTabRuleByLocation(tabRule, monitor, position, windowId) {\n  var changed = false;\n  try {\n    if (tabRule.position !== position && tabRule.monitor.id !== monitor.id) {\n      console.log('TabRule Reposition Saved (triggered by window.id:' + windowId + ')');\n      console.log(tabRule.position + ' -> ' + position);\n      console.log(tabRule.monitor.workArea);\n      console.log(monitor.workArea);\n      tabRule.position = position;\n      tabRule.monitor = monitor;\n      changed = true;\n    }\n  } catch (err) {\n    (console.error || console.log).call(console, err.stack || err);\n  }\n\n  return changed;\n}\n\nfunction validateTabLocation(window, tab, tabRule) {\n  var valid = true;\n  try {\n    valid = window.left === tabRule.monitor.workArea.left && window.top === tabRule.monitor.workArea.top && window.width === tabRule.monitor.workArea.width && window.height === tabRule.monitor.workArea.height;\n  } catch (err) {\n    (console.error || console.log).call(console, err.stack || err);\n  }\n  return valid;\n}\n\nfunction findTabRuleMatch(tabRuleOptions, tab) {\n  var match = null;\n  try {\n    if (tab) {\n      for (var idx = 0; idx < tabRuleOptions.tabs.length; idx++) {\n        var tabRule = tabRuleOptions.tabs[idx];\n        if (tabRule.active && tab.url && tabRule.url && tab.url.indexOf(tabRule.url) >= 0) {\n          match = tabRule;\n          break;\n        }\n      }\n    }\n  } catch (err) {\n    (console.error || console.log).call(console, err.stack || err);\n  }\n  return match;\n}\n\nfunction findCustomPositionMatch(tabRuleOptions, custom) {\n  var match = null;\n  try {\n    if (custom) {\n      for (var idx = 0; idx < tabRuleOptions.positions.length; idx++) {\n        var customPosition = tabRuleOptions.positions[idx];\n        if (customPosition.name && customPosition.name !== '' && customPosition.name === custom) {\n          match = customPosition;\n          break;\n        }\n      }\n    }\n  } catch (err) {\n    (console.error || console.log).call(console, err.stack || err);\n  }\n  return match;\n}\n\nfunction calculateWorkAreaByPosition(monitorWorkArea, position) {\n  var workarea = {\n    left: monitorWorkArea.left,\n    top: monitorWorkArea.top,\n    width: monitorWorkArea.width,\n    height: monitorWorkArea.height\n  };\n\n  if (position === POSITIONS.LEFT_HALF.id) {\n    workarea.width = Math.floor(workarea.width / 2);\n  }\n  if (position === POSITIONS.RIGHT_HALF.id) {\n    var halfWidth = Math.floor(workarea.width / 2);\n    workarea.left += workarea.width - halfWidth;\n    workarea.width = halfWidth;\n  }\n  if (position === POSITIONS.TOP_HALF.id) {\n    workarea.height = Math.floor(workarea.height / 2);\n  }\n  if (position === POSITIONS.BOTTOM_HALF.id) {\n    var halfHeight = Math.floor(workarea.height / 2);\n    workarea.top += workarea.height - halfHeight;\n    workarea.height = halfHeight;\n  }\n  return workarea;\n}\n\nfunction loadOptions() {\n  var tabRuleOptions = localStorage[OPTIONS_KEY];\n  try {\n    tabRuleOptions = tabRuleOptions ? JSON.parse(tabRuleOptions) : {\n      tabs: []\n    };\n    if (!tabRuleOptions.options) {\n      tabRuleOptions.options = [];\n    }\n  } catch (err) {\n    (console.error || console.log).call(console, err.stack || err);\n  }\n  return tabRuleOptions;\n}\n\nfunction saveOptions(tabRuleOptions) {\n  localStorage[OPTIONS_KEY] = JSON.stringify(tabRuleOptions);\n}\n\ntry {\n  chrome.tabs.onCreated.addListener(onTabCreated);\n  //chrome.tabs.onUpdated.addListener(onTabUpdate);\n} catch (err) {\n  (console.error || console.log).call(console, err.stack || err);\n}\n\n// function onTabUpdate(tabId, changeInfo, tab) {\n//   if (changeInfo.url && changeInfo.url !== '') {\n//     console.log('Tab updated id:' + tab.id + ' url:' + changeInfo.url);\n//     onTabCreated(tab, true);\n//   }\n// }\n\nfunction getInt(value) {\n  var intValue = 0;\n  try {\n    if (typeof value === 'string') {\n      intValue = parseInt(value, 10);\n    } else if (typeof value === 'number') {\n      intValue = value;\n    }\n  } catch (err) {\n    (console.error || console.log).call(console, err.stack || err);\n  }\n  return intValue;\n}\n\nfunction onTabCreated(tab, disableCreationMessage) {\n  try {\n    if (!disableCreationMessage) {\n      console.log('Tab Created id:' + tab.id + ' url:' + tab.url);\n    }\n    moveTabIntoPositionedWindow(tab, 0);\n  } catch (err) {\n    (console.error || console.log).call(console, err.stack || err);\n  }\n\n  function moveTabIntoPositionedWindow(tab, count) {\n    if (count > MAX_MOVE_TRIES) {\n      console.log('Tab with empty url could not be resolved after ' + MAX_MOVE_TRIES + ' tries');\n    }\n    if (!tab.url || tab.url === '') {\n      console.log('Tab with empty url, trying in 100ms');\n      setTimeout(function () {\n        chrome.tabs.get(tab.id, function (tab) {\n          moveTabIntoPositionedWindow(tab, count + 1);\n        });\n      }, 100);\n    } else {\n\n      var tabRuleOptions = loadOptions();\n      var tabRule = findTabRuleMatch(tabRuleOptions, tab);\n      var isCustomPosition = false;\n      if (tabRule) {\n        console.log('Tab matched ' + tab.id + ' moving tab with url:' + tab.url);\n        var createData = calculateWorkAreaByPosition(tabRule.monitor.workArea, tabRule.position);\n\n        if (tabRule.custom && tabRuleOptions.positions && tabRuleOptions.positions.length > 0) {\n          var customPosition = findCustomPositionMatch(tabRuleOptions, tabRule.custom);\n          if (customPosition) {\n            createData = {\n              left: getInt(customPosition.x),\n              top: getInt(customPosition.y),\n              width: getInt(customPosition.width),\n              height: getInt(customPosition.height)\n            };\n            isCustomPosition = true;\n          }\n        }\n\n        createData.tabId = tab.id;\n        if (tabRule.popup) {\n          createData.type = 'popup';\n        }\n        chrome.windows.getAll({}, function (windows) {\n          for (var i = 1; i < windows.length; i++) {\n            chrome.windows.remove(windows[i].id);\n          }\n        });\n        chrome.windows.create(createData, function onCreated(window) {\n          if (!isCustomPosition && tabRule.position === POSITIONS.CENTER.id) {\n            chrome.windows.update(window.id, { state: 'maximized' }, function onUpdated() {});\n          }\n          if (!isCustomPosition && tabRule.position === POSITIONS.FULLSIZE.id) {\n            chrome.windows.update(window.id, { state: 'fullscreen' }, function onUpdated() {});\n          }\n        });\n      }\n    }\n  }\n}"] }